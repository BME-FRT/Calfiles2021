;last modified 2023. 05. 08. 1:29:51 by pungorpeter    (22)

[2023_Energy]

[Kinetic_Energy]

{$IfNotExists(#vx_mps) 2023_Speed.CAL}

E_Kinetic=Power(#vx_mps,2)
E_Kinetic=*(#E_Kinetic,Parameters.MASS)
E_Kinetic=/(#E_Kinetic,2000)                   //2*1000
E_Kinetic=Set(DIM='kJ')

//Energy used to speed up the vehicle
P_Useful=Derivate(#E_Kinetic)
P_Useful=If(#P_Useful,>,0,#P_Useful,0)
E_Useful=Integrate(#P_Useful,0)
P_Useful=Set(DIM='kW')
E_Useful=Set(DIM='kJ')

[Electric_Energy]
P_Electric =  *(#HV_Voltage_Before_AIRs,#HV_Current)
P_Electric =  /(#P_Electric, 1000)
P_Electric = Set( DIM = 'kW')

E_Electric= Integrate(#P_Electric,0)
Ppos=If(#P_Electric,>,0,#P_Electric,0)
E_Electric_pos=Integrate(#Ppos,0)
Delete(#Ppos)
E_Electric=Set(Dim='kJ')
E_Electric_pos=Set(Dim='kJ')

Pneg=If(#P_Electric,<,0,#P_Electric,0)
E_Electric_neg=Integrate(#Pneg,0)
Delete(#Pneg)
E_Electric_neg=Set(Dim='kJ')

/////Electric Power for Rules compliant energy calculation

P_Regenerative_EM = *(#P_Electric, 0.9)
P_Electric_EM = If(#P_Electric, >=, 0, #P_Electric, #P_Regenerative_EM)

E_Electric_EM= Integrate(#P_Electric_EM,0)
E_Electric_EM = /(#E_Electric_EM,3.6)
E_Electric_EM = Set(DIM = 'Wh')
Delete(#P_Regenerative_EM)

[Rolling Resistance]

P_RollRes=Power(#vx_mps,2)
P_RollRes=*(#P_RollRes,Parameters.C_L)
P_RollRes=*(#P_RollRes,Parameters.AREA)
P_RollRes=*(#P_RollRes,1.225)         //air density
P_RollRes=*(#P_RollRes,0.5)
P_d1=Const(1,200)
P_d1=*(#P_d1,Parameters.MASS)
P_d1=*(#P_d1,9.81)
P_RollRes=+(#P_RollRes,#P_d1)
P_RollRes=*(#P_RollRes,Parameters.ROLLING_COEFFICIENT)
P_RollRes=*(#P_RollRes,#vx_mps)
Delete(#P_d1)

E_RollRes=Integrate(#P_RollRes,0)
E_RollRes=/(#E_RollRes,1000)
E_RollRes=Set(Dim='kJ')

[Drag]

P_Drag=Power(#vx_mps,3)
P_Drag=*(#P_Drag,Parameters.C_D)
P_Drag=*(#P_Drag,Parameters.AREA)
P_Drag=*(#P_Drag,1.225)
P_Drag=/(#P_Drag,2000)       //(2*1000)
P_Drag=Set(Dim='kW')
E_Drag=Integrate(#P_Drag,0)

[Motor mechanical Power]

P_motor_1=*(#AMK_TorqueLimitPositive_1,#AMK_Actualvelocity_1)
P_motor_1=*(#P_motor_1,@Pi)
P_motor_1=/(#P_motor_1,30)
P_motor_1=/(#P_motor_1,1000)
E_motor_1=Integrate(#P_motor_1,0)

P_motor_2=*(#AMK_TorqueLimitPositive_2,#AMK_Actualvelocity_2)
P_motor_2=*(#P_motor_2,@Pi)
P_motor_2=/(#P_motor_2,30)
P_motor_2=/(#P_motor_2,1000)
E_motor_2=Integrate(#P_motor_2,0)

P_motor_3=*(#AMK_TorqueLimitPositive_3,#AMK_Actualvelocity_3)
P_motor_3=*(#P_motor_3,@Pi)
P_motor_3=/(#P_motor_3,30)
P_motor_3=/(#P_motor_3,1000)
E_motor_3=Integrate(#P_motor_3,0)

P_motor_4=*(#AMK_TorqueLimitPositive_4,#AMK_Actualvelocity_4)
P_motor_4=*(#P_motor_4,@Pi)
P_motor_4=/(#P_motor_4,30)
P_motor_4=/(#P_motor_4,1000)
E_motor_4=Integrate(#P_motor_4,0)

P_motor_1=Set(Dim='kW')
P_motor_2=Set(Dim='kW')
P_motor_3=Set(Dim='kW')
P_motor_4=Set(Dim='kW')

E_motor_1=Set(Dim='kJ')
E_motor_2=Set(Dim='kJ')
E_motor_3=Set(Dim='kJ')
E_motor_4=Set(Dim='kJ')

E_motors=+(#E_motor_1,#E_motor_2)
E_motors=+(#E_motors,#E_motor_3)
E_motors=+(#E_motors,#E_motor_4)

P_motors=+(#P_motor_1,#P_motor_2)
P_motors=+(#P_motors,#P_motor_3)
P_motors=+(#P_motors,#P_motor_4)

[Efficiency]

Motor_Efficiency=+(#P_motor_1,#P_motor_2)
Motor_Efficiency=+(#Motor_Efficiency,#P_motor_3)
Motor_Efficiency=+(#Motor_Efficiency,#P_motor_4)
Motor_Efficiency=/(#Motor_Efficiency,#P_Electric)
Motor_Efficiency=Set(DIM='-')

P_Lost=-(#P_Electric,#P_motor_1)
P_Lost=-(#P_Lost,#P_motor_2)
P_Lost=-(#P_Lost,#P_motor_3)
P_Lost=-(#P_Lost,#P_motor_4)

[mAh]

INT_HV_current_Pos=If(#HV_Current,>,0,#HV_Current,0)
INT_HV_current_Neg=If(#HV_Current,>,0,0,#HV_Current)
INT_HV_current_Pos=Integrate(#INT_HV_current_Pos,0)
INT_HV_current_Neg=Integrate(#INT_HV_current_Neg,0)
INT_HV_current_Pos=/(#INT_HV_current_Pos,3.6)
INT_HV_current_Neg=/(#INT_HV_current_Neg,3.6)
INT_HV_current_Pos=Set(DIM='mAh')
INT_HV_current_Neg=Set(DIM='mAh')
